//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace ISC_Http_Openapi.IMSWebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="IWebServicebinding", Namespace="http://tempuri.org/")]
    public partial class IWebServiceservice : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getERPDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback getERPDataBase64OperationCompleted;
        
        private System.Threading.SendOrPostCallback updateERPDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateERPDataBase64OperationCompleted;
        
        private System.Threading.SendOrPostCallback getIMSDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback getIMSDataBase64OperationCompleted;
        
        private System.Threading.SendOrPostCallback updateIMSDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateIMSDataBase64OperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public IWebServiceservice() {
            this.Url = global::ISC_Http_Openapi.Properties.Settings.Default.ISC_Http_Openapi_IMSWebReference_IWebServiceservice;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getERPDataCompletedEventHandler getERPDataCompleted;
        
        /// <remarks/>
        public event getERPDataBase64CompletedEventHandler getERPDataBase64Completed;
        
        /// <remarks/>
        public event updateERPDataCompletedEventHandler updateERPDataCompleted;
        
        /// <remarks/>
        public event updateERPDataBase64CompletedEventHandler updateERPDataBase64Completed;
        
        /// <remarks/>
        public event getIMSDataCompletedEventHandler getIMSDataCompleted;
        
        /// <remarks/>
        public event getIMSDataBase64CompletedEventHandler getIMSDataBase64Completed;
        
        /// <remarks/>
        public event updateIMSDataCompletedEventHandler updateIMSDataCompleted;
        
        /// <remarks/>
        public event updateIMSDataBase64CompletedEventHandler updateIMSDataBase64Completed;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WebServiceInf-IWebService#getERPData", RequestNamespace="urn:WebServiceInf-IWebService", ResponseNamespace="urn:WebServiceInf-IWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public bool getERPData(string DocType, string InputDTOXml, ref string ResultDTOXml, ref string ResultMsg) {
            object[] results = this.Invoke("getERPData", new object[] {
                        DocType,
                        InputDTOXml,
                        ResultDTOXml,
                        ResultMsg});
            ResultDTOXml = ((string)(results[1]));
            ResultMsg = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void getERPDataAsync(string DocType, string InputDTOXml, string ResultDTOXml, string ResultMsg) {
            this.getERPDataAsync(DocType, InputDTOXml, ResultDTOXml, ResultMsg, null);
        }
        
        /// <remarks/>
        public void getERPDataAsync(string DocType, string InputDTOXml, string ResultDTOXml, string ResultMsg, object userState) {
            if ((this.getERPDataOperationCompleted == null)) {
                this.getERPDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetERPDataOperationCompleted);
            }
            this.InvokeAsync("getERPData", new object[] {
                        DocType,
                        InputDTOXml,
                        ResultDTOXml,
                        ResultMsg}, this.getERPDataOperationCompleted, userState);
        }
        
        private void OngetERPDataOperationCompleted(object arg) {
            if ((this.getERPDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getERPDataCompleted(this, new getERPDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WebServiceInf-IWebService#getERPDataBase64", RequestNamespace="urn:WebServiceInf-IWebService", ResponseNamespace="urn:WebServiceInf-IWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public bool getERPDataBase64(string DocType, string InputDTOXml, ref string ResultDTOXml, ref string ResultMsg) {
            object[] results = this.Invoke("getERPDataBase64", new object[] {
                        DocType,
                        InputDTOXml,
                        ResultDTOXml,
                        ResultMsg});
            ResultDTOXml = ((string)(results[1]));
            ResultMsg = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void getERPDataBase64Async(string DocType, string InputDTOXml, string ResultDTOXml, string ResultMsg) {
            this.getERPDataBase64Async(DocType, InputDTOXml, ResultDTOXml, ResultMsg, null);
        }
        
        /// <remarks/>
        public void getERPDataBase64Async(string DocType, string InputDTOXml, string ResultDTOXml, string ResultMsg, object userState) {
            if ((this.getERPDataBase64OperationCompleted == null)) {
                this.getERPDataBase64OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetERPDataBase64OperationCompleted);
            }
            this.InvokeAsync("getERPDataBase64", new object[] {
                        DocType,
                        InputDTOXml,
                        ResultDTOXml,
                        ResultMsg}, this.getERPDataBase64OperationCompleted, userState);
        }
        
        private void OngetERPDataBase64OperationCompleted(object arg) {
            if ((this.getERPDataBase64Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getERPDataBase64Completed(this, new getERPDataBase64CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WebServiceInf-IWebService#updateERPData", RequestNamespace="urn:WebServiceInf-IWebService", ResponseNamespace="urn:WebServiceInf-IWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public bool updateERPData(string DocType, string InputDTOXml, ref string ResultMsg) {
            object[] results = this.Invoke("updateERPData", new object[] {
                        DocType,
                        InputDTOXml,
                        ResultMsg});
            ResultMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateERPDataAsync(string DocType, string InputDTOXml, string ResultMsg) {
            this.updateERPDataAsync(DocType, InputDTOXml, ResultMsg, null);
        }
        
        /// <remarks/>
        public void updateERPDataAsync(string DocType, string InputDTOXml, string ResultMsg, object userState) {
            if ((this.updateERPDataOperationCompleted == null)) {
                this.updateERPDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateERPDataOperationCompleted);
            }
            this.InvokeAsync("updateERPData", new object[] {
                        DocType,
                        InputDTOXml,
                        ResultMsg}, this.updateERPDataOperationCompleted, userState);
        }
        
        private void OnupdateERPDataOperationCompleted(object arg) {
            if ((this.updateERPDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateERPDataCompleted(this, new updateERPDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WebServiceInf-IWebService#updateERPDataBase64", RequestNamespace="urn:WebServiceInf-IWebService", ResponseNamespace="urn:WebServiceInf-IWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public bool updateERPDataBase64(string DocType, string InputDTOXml, ref string ResultMsg) {
            object[] results = this.Invoke("updateERPDataBase64", new object[] {
                        DocType,
                        InputDTOXml,
                        ResultMsg});
            ResultMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateERPDataBase64Async(string DocType, string InputDTOXml, string ResultMsg) {
            this.updateERPDataBase64Async(DocType, InputDTOXml, ResultMsg, null);
        }
        
        /// <remarks/>
        public void updateERPDataBase64Async(string DocType, string InputDTOXml, string ResultMsg, object userState) {
            if ((this.updateERPDataBase64OperationCompleted == null)) {
                this.updateERPDataBase64OperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateERPDataBase64OperationCompleted);
            }
            this.InvokeAsync("updateERPDataBase64", new object[] {
                        DocType,
                        InputDTOXml,
                        ResultMsg}, this.updateERPDataBase64OperationCompleted, userState);
        }
        
        private void OnupdateERPDataBase64OperationCompleted(object arg) {
            if ((this.updateERPDataBase64Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateERPDataBase64Completed(this, new updateERPDataBase64CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WebServiceInf-IWebService#getIMSData", RequestNamespace="urn:WebServiceInf-IWebService", ResponseNamespace="urn:WebServiceInf-IWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public bool getIMSData(string DocType, string InputDTOXml, ref string ResultDTOXml, ref string ResultMsg) {
            object[] results = this.Invoke("getIMSData", new object[] {
                        DocType,
                        InputDTOXml,
                        ResultDTOXml,
                        ResultMsg});
            ResultDTOXml = ((string)(results[1]));
            ResultMsg = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void getIMSDataAsync(string DocType, string InputDTOXml, string ResultDTOXml, string ResultMsg) {
            this.getIMSDataAsync(DocType, InputDTOXml, ResultDTOXml, ResultMsg, null);
        }
        
        /// <remarks/>
        public void getIMSDataAsync(string DocType, string InputDTOXml, string ResultDTOXml, string ResultMsg, object userState) {
            if ((this.getIMSDataOperationCompleted == null)) {
                this.getIMSDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetIMSDataOperationCompleted);
            }
            this.InvokeAsync("getIMSData", new object[] {
                        DocType,
                        InputDTOXml,
                        ResultDTOXml,
                        ResultMsg}, this.getIMSDataOperationCompleted, userState);
        }
        
        private void OngetIMSDataOperationCompleted(object arg) {
            if ((this.getIMSDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getIMSDataCompleted(this, new getIMSDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WebServiceInf-IWebService#getIMSDataBase64", RequestNamespace="urn:WebServiceInf-IWebService", ResponseNamespace="urn:WebServiceInf-IWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public bool getIMSDataBase64(string DocType, string InputDTOXml, ref string ResultDTOXml, ref string ResultMsg) {
            object[] results = this.Invoke("getIMSDataBase64", new object[] {
                        DocType,
                        InputDTOXml,
                        ResultDTOXml,
                        ResultMsg});
            ResultDTOXml = ((string)(results[1]));
            ResultMsg = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void getIMSDataBase64Async(string DocType, string InputDTOXml, string ResultDTOXml, string ResultMsg) {
            this.getIMSDataBase64Async(DocType, InputDTOXml, ResultDTOXml, ResultMsg, null);
        }
        
        /// <remarks/>
        public void getIMSDataBase64Async(string DocType, string InputDTOXml, string ResultDTOXml, string ResultMsg, object userState) {
            if ((this.getIMSDataBase64OperationCompleted == null)) {
                this.getIMSDataBase64OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetIMSDataBase64OperationCompleted);
            }
            this.InvokeAsync("getIMSDataBase64", new object[] {
                        DocType,
                        InputDTOXml,
                        ResultDTOXml,
                        ResultMsg}, this.getIMSDataBase64OperationCompleted, userState);
        }
        
        private void OngetIMSDataBase64OperationCompleted(object arg) {
            if ((this.getIMSDataBase64Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getIMSDataBase64Completed(this, new getIMSDataBase64CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WebServiceInf-IWebService#updateIMSData", RequestNamespace="urn:WebServiceInf-IWebService", ResponseNamespace="urn:WebServiceInf-IWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public bool updateIMSData(string DocType, string InputDTOXml, string UpdateType, ref string ResultMsg) {
            object[] results = this.Invoke("updateIMSData", new object[] {
                        DocType,
                        InputDTOXml,
                        UpdateType,
                        ResultMsg});
            ResultMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateIMSDataAsync(string DocType, string InputDTOXml, string UpdateType, string ResultMsg) {
            this.updateIMSDataAsync(DocType, InputDTOXml, UpdateType, ResultMsg, null);
        }
        
        /// <remarks/>
        public void updateIMSDataAsync(string DocType, string InputDTOXml, string UpdateType, string ResultMsg, object userState) {
            if ((this.updateIMSDataOperationCompleted == null)) {
                this.updateIMSDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateIMSDataOperationCompleted);
            }
            this.InvokeAsync("updateIMSData", new object[] {
                        DocType,
                        InputDTOXml,
                        UpdateType,
                        ResultMsg}, this.updateIMSDataOperationCompleted, userState);
        }
        
        private void OnupdateIMSDataOperationCompleted(object arg) {
            if ((this.updateIMSDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateIMSDataCompleted(this, new updateIMSDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WebServiceInf-IWebService#updateIMSDataBase64", RequestNamespace="urn:WebServiceInf-IWebService", ResponseNamespace="urn:WebServiceInf-IWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public bool updateIMSDataBase64(string DocType, string InputDTOXml, string UpdateType, ref string ResultMsg) {
            object[] results = this.Invoke("updateIMSDataBase64", new object[] {
                        DocType,
                        InputDTOXml,
                        UpdateType,
                        ResultMsg});
            ResultMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateIMSDataBase64Async(string DocType, string InputDTOXml, string UpdateType, string ResultMsg) {
            this.updateIMSDataBase64Async(DocType, InputDTOXml, UpdateType, ResultMsg, null);
        }
        
        /// <remarks/>
        public void updateIMSDataBase64Async(string DocType, string InputDTOXml, string UpdateType, string ResultMsg, object userState) {
            if ((this.updateIMSDataBase64OperationCompleted == null)) {
                this.updateIMSDataBase64OperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateIMSDataBase64OperationCompleted);
            }
            this.InvokeAsync("updateIMSDataBase64", new object[] {
                        DocType,
                        InputDTOXml,
                        UpdateType,
                        ResultMsg}, this.updateIMSDataBase64OperationCompleted, userState);
        }
        
        private void OnupdateIMSDataBase64OperationCompleted(object arg) {
            if ((this.updateIMSDataBase64Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateIMSDataBase64Completed(this, new updateIMSDataBase64CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void getERPDataCompletedEventHandler(object sender, getERPDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getERPDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getERPDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultDTOXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void getERPDataBase64CompletedEventHandler(object sender, getERPDataBase64CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getERPDataBase64CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getERPDataBase64CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultDTOXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void updateERPDataCompletedEventHandler(object sender, updateERPDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateERPDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateERPDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void updateERPDataBase64CompletedEventHandler(object sender, updateERPDataBase64CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateERPDataBase64CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateERPDataBase64CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void getIMSDataCompletedEventHandler(object sender, getIMSDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getIMSDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getIMSDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultDTOXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void getIMSDataBase64CompletedEventHandler(object sender, getIMSDataBase64CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getIMSDataBase64CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getIMSDataBase64CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultDTOXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ResultMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void updateIMSDataCompletedEventHandler(object sender, updateIMSDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateIMSDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateIMSDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void updateIMSDataBase64CompletedEventHandler(object sender, updateIMSDataBase64CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateIMSDataBase64CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateIMSDataBase64CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591